-----------------------DECLARATIONS-----------------------------

declaration    : classDecl
               | funDecl
               | varDecl
               | statement ;

classDecl      : "class" IDENTIFIER ( "<" IDENTIFIER )?
                 "{" function* "}" ;
funDecl        : "fun" function ;
varDecl        : "var" IDENTIFIER ( "=" expression )? ";" ;


-----------------------STATEMENTS------------------------------

statement      : exprStmt
               | printStmt
               | returnStmt
               | block
               | controlStmt
               | forStmt
               | ifStmt
               | whileStmt
               | breakStmt ;

exprStmt       : expression ";" ;
forStmt        : "for" "(" ( varDecl | exprStmt | ";" )
                           expression? ";"
                           expression? ")" statement ;
ifStmt         : "if" "(" expression ")" statement
                 ( "else" statement )? ;
printStmt      : "print" expression ";" ;
returnStmt     : "return" expression? ";" ;
whileStmt      : "while" "(" expression ")" statement ;
block          : "{" declaration* "}" ;
breakStmt      : "break" ";" ;
continueStmt   : "continue" ";" ;

-----------------------ADDITIONAL UTILITY RULES--------------------------

function       : IDENTIFIER "(" parameters? ")" block ;
parameters     : IDENTIFIER ( "," IDENTIFIER )* ;
arguments      : expression ( "," expression )* ;



-----------------------EXPRESSIONS---------------------------------

expression     : assignment ;

assignment     : ( call "." )? IDENTIFIER "=" assignment
               | logic_or ;

logic_or       : logic_and ( "or" logic_and )* ;
logic_and      : equality ( "and" equality )* ;
equality       : comparison ( ( "!=" | "==" ) comparison )* ;
comparison     : term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           : factor ( ( "-" | "+" ) factor )* ;
factor         : unary ( ( "/" | "*" ) unary )* ;

unary          : ( "!" | "-" ) unary | call ;
call           : primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
primary        : "true" | "false" | "nil" | "this"
               | NUMBER | STRING | IDENTIFIER | "(" expression ")"
               | "super" "." IDENTIFIER
               | functionExpression ;




---------------------LEXICAL GRAMMAR RULES---------------------------


NUMBER         : DIGIT+ ( "." DIGIT+ )? ;
STRING         : "\"" <any char except "\"">* "\"" ;
IDENTIFIER     : ALPHA ( ALPHA | DIGIT )* ;
ALPHA          : "a" ... "z" | "A" ... "Z" | "_" ;
DIGIT          : "0" ... "9" ;

